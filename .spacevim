" Comment the following line if you don't want Vim and NeoVim to share the
" same plugin download directory.
let g:spacevim_plug_home = '~/.vim/plugged'

" Uncomment the following line to override the leader key. The default value is space key "<\Space>".
" let g:spacevim_leader = "<\Space>"

" Uncomment the following line to override the local leader key. The default value is comma ','.
" let g:spacevim_localleader = ','

" Enable the existing layers in space-vim.
" Refer to https://github.com/liuchengxu/space-vim/blob/master/layers/LAYERS.md for all available layers.
let g:spacevim_layers = [
      \ 'fzf', 'better-defaults', 'which-key', 'file-manager', 'git', 'lightline', 'tmux',
      \ ]

" Uncomment the following line if your terminal(-emulator) supports true colors.
let g:spacevim_enable_true_color = 1

" Uncomment the following if you have some nerd font installed.
" let g:spacevim_nerd_fonts = 1

" If you want to have more control over the layer, try using Layer command.
" if g:spacevim.gui
"   Layer 'airline'
" endif

let g:coc_global_extensions = [
  \ 'coc-phpls', 
  \ 'coc-pairs',
  \ 'coc-tsserver',
  \ 'coc-vetur',
  \ ]

" Manage your own plugins.
" Refer to https://github.com/junegunn/vim-plug for more detials.
function! UserInit()

  " Add your own plugin via Plug command.
  Plug 'junegunn/seoul256.vim'
  Plug 'drewtempelmeyer/palenight.vim'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'mattn/emmet-vim'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-repeat'
  Plug 'bagrat/vim-buffet'
  Plug 'svermeulen/vim-easyclip'
  Plug 'junegunn/vim-easy-align'
  Plug '907th/vim-auto-save'
  Plug 'sheerun/vim-polyglot'
  Plug 'easymotion/vim-easymotion'

endfunction

" Override the default settings from space-vim as well as adding extras
function! UserConfig()

  " Override the default settings.
  " Uncomment the following line to disable relative number.
  " set norelativenumber
  set background=dark
  colorscheme palenight
  let g:lightline = { 'colorscheme': 'palenight', 'enable': { 'tabline': 0 } }
  " Swap lines
  nmap <C-Down> <S-V>mp
  nmap <C-Up> <S-V>mkP
  imap <C-Down> <Esc><S-V>mpi
  imap <C-Up> <Esc><S-V>mkPi
  
  " Emmet
  let g:user_emmet_leader_key=','
  let g:user_emmet_install_global = 0
  autocmd FileType html,css,blade EmmetInstall

  " Easymotion
  let g:EasyMotion_do_mapping = 0 " Disable default mappings
  nmap f <Plug>(easymotion-overwin-f)
  let g:EasyMotion_smartcase = 1
  let g:EasyMotion_startofline = 0
  map <Leader>j <Plug>(easymotion-j)
  map <Leader>k <Plug>(easymotion-k)
  
  " Use FZF instead of CtrlP
  nmap <C-P> :FZF<CR>

  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)

  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)

  " vim easyclip
  nnoremap gm m

  " vim auto save
  let g:auto_save = 1

  " vim-buffet
  let g:buffet_show_index = 1
  let g:buffet_powerline_separators = 1
  let g:buffet_tab_icon = "\uf00a"
  let g:buffet_left_trunc_icon = "\uf0a8"
  let g:buffet_right_trunc_icon = "\uf0a9"
  nmap <leader>1 <Plug>BuffetSwitch(1)
  nmap <leader>2 <Plug>BuffetSwitch(2)
  nmap <leader>3 <Plug>BuffetSwitch(3)
  nmap <leader>4 <Plug>BuffetSwitch(4)
  nmap <leader>5 <Plug>BuffetSwitch(5)
  nmap <leader>6 <Plug>BuffetSwitch(6)
  nmap <leader>7 <Plug>BuffetSwitch(7)
  nmap <leader>8 <Plug>BuffetSwitch(8)
  nmap <leader>9 <Plug>BuffetSwitch(9)
  nmap <leader>0 <Plug>BuffetSwitch(10)
  noremap <Tab> :bn<CR>
  noremap <S-Tab> :bp<CR>
  noremap <Leader><Tab> :Bw<CR>
  noremap <Leader><S-Tab> :Bw!<CR>
  noremap <C-t> :tabnew split<CR>
  " Note: Make sure the function is defined before `vim-buffet` is loaded.
  function! g:BuffetSetCustomColors()
    hi! BuffetCurrentBuffer cterm=NONE ctermbg=170 ctermfg=8 guibg=#82b1ff guifg=#000000
    hi! BuffetTab cterm=NONE ctermbg=235 ctermfg=8 guibg=#292D3E guifg=#bfc7d5
    hi! BuffetBuffer cterm=NONE ctermbg=170 ctermfg=8 guibg=#292D3E guifg=#bfc7d5
  endfunction

  " install ripgrep to use this feature
  function! RipgrepFzf(query, fullscreen)
    let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
  endfunction
  command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)
  " Use Ctrl+F to search in files
  nmap <C-F> :RG<CR>
 
  " Adding extras.
  " Uncomment the following line If you have installed the powerline fonts.
  " It is good for airline layer.
  " let g:airline_powerline_fonts = 1

  " Use tab for trigger completion with characters ahead and navigate.
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion.
  if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  " Make <CR> auto-select the first completion item and notify coc.nvim to
  " format on enter, <cr> could be remapped by other vim plugin
  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  " Use `[g` and `]g` to navigate diagnostics
  " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')
endfunction
